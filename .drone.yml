pipeline:
  env_file: ./.env
  environment:
    - GH_TOKEN
    - SSH_KEY
    - GIN_MODE
    - SLACK_WEBHOOK
    - DOCKER_USERNAME
    - DOCKER_PASSWORD
    - DOCKER_EMAIL
  docker:
    image: plugins/docker:latest
    secrets: [ gh_token ]
    environment:
      # - DOCKER_LAUNCH_DEBUG=true # Set "true" during "drone exec". (If false, an error occurs.)
    # repo: https://${GH_TOKEN}@github.com/okapie/okapie.github.io
    repo: okapie/okapie.github.io
    # debug: true # Set "true" during "drone exec". (If false, an error occurs.)
    when:
      branch: master
  restore-cache:
    image: drillster/drone-volume-cache
    restore: true
    mount:
      - ./node_modules
    volumes:
      - /tmp/cache:/cache
    when:
      event: [push, pull_request, tag]
  ssh:
    image: plugins/ssh
    user: okapie
    host: ${DRONE_HOST}
    port: 8080:8000
    secrets: [ ssh_key ]
  build:
    image: node:7.10.0
    commands:
      - npm install --silent
      - npm run lint --silent
    secrets: [ ssh_key ]
    when:
      branch: master
      event: [push, pull_request]
  publish:
    image: plugins/gh-pages
    secrets: [ gh_token, ssh_key ]
    registry: https://github.com
    repo: https://${GH_TOKEN}@github.com/okapie/okapie.github.io
     source: src
     files: src/*
    remote: okapie/okapie.github.io
    target: gh_token
    commands:
      - ./docs.sh
    when:
      branch: master
      environment: master
      event: [push, tag, deployment]
      local: true
  rebuild-cache:
    image: drillster/drone-volume-cache
    rebuild: true
    mount:
      - ./node_modules
    volumes:
      - /tmp/cache:/cache
    when:
      event: [push, pull_request, tag]
  notify:
    image: plugins/slack
    # secrets: [ secret_token ]
    # secret: $$SECRET_TOKEN
    # webhook: ${SLACK_WEBHOOK}
    webhook: "https://hooks.slack.com/services/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"
    channel: "#notification"
    # username: okapie
    username: "drone-ci"
    icon_emoji: ":sushi:"
#    template: >
#      <!channel>
#      *{{build.status}}*
#      <{{build.link}}|{{repo.owner}}/{{repo.name}}> ({{build.branch}}) from {{build.author}}
#    template: >
#      {{#success build.status}}
#        build {{build.number}} succeeded. Good job.
#      {{else}}
#        build {{build.number}} failed. Fix me please.
#      {{/success}}
    when:
      event: [ push, tag, deployment, pull_request ]
      status: [ success, failure ]
